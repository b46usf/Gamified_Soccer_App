name: CI Auto Test, Lint, and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # DETEKSI folder proyek yang berisi package.json yg valid
      - name: Detect project directory (workdir)
        id: detect
        shell: bash
        run: |
          set -e
          CANDIDATES=$(find . -type f -name package.json -not -path "*/node_modules/*" | sort)
          WORKDIR=""
          # 1) Prioritas: ada scripts.test
          for f in $CANDIDATES; do
            DIR=$(dirname "$f")
            HAS_TEST=$(node -e "try{const p=require('$f');console.log(Boolean(p.scripts && p.scripts.test))}catch(e){console.log(false)}")
            if [ "$HAS_TEST" = "true" ]; then WORKDIR="$DIR"; break; fi
          done
          # 2) Fallback: ada scripts.build
          if [ -z "$WORKDIR" ]; then
            for f in $CANDIDATES; do
              DIR=$(dirname "$f")
              HAS_BUILD=$(node -e "try{const p=require('$f');console.log(Boolean(p.scripts && p.scripts.build))}catch(e){console.log(false)}")
              if [ "$HAS_BUILD" = "true" ]; then WORKDIR="$DIR"; break; fi
            done
          fi
          # 3) Fallback terakhir: root
          if [ -z "$WORKDIR" ]; then WORKDIR="."; fi
          echo "workdir=$WORKDIR" >> $GITHUB_OUTPUT
          echo "Selected workdir: $WORKDIR"

      # Setup Node setelah kita tahu workdir (agar cache npm tepat)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ${{ steps.detect.outputs.workdir }}/package-lock.json

      - name: Show selected package.json scripts
        run: node -e "const p=require('./package.json'); console.log(p.scripts||{});"
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
        working-directory: ${{ steps.detect.outputs.workdir }}

      # Cek ketersediaan script di package.json (di dalam workdir terpilih)
      - name: Check scripts in package.json
        id: check-scripts
        run: |
          TEST_EXISTS=$(node -e "const p=require('./package.json'); console.log(String(!!(p.scripts&&p.scripts.test)).toLowerCase())")
          LINT_EXISTS=$(node -e "const p=require('./package.json'); console.log(String(!!(p.scripts&&p.scripts.lint)).toLowerCase())")
          BUILD_EXISTS=$(node -e "const p=require('./package.json'); console.log(String(!!(p.scripts&&p.scripts.build)).toLowerCase())")
          echo "has_test=${TEST_EXISTS}" >> $GITHUB_OUTPUT
          echo "has_lint=${LINT_EXISTS}" >> $GITHUB_OUTPUT
          echo "has_build=${BUILD_EXISTS}" >> $GITHUB_OUTPUT
          echo "has_test=${TEST_EXISTS}"
          echo "has_lint=${LINT_EXISTS}"
          echo "has_build=${BUILD_EXISTS}"
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: Run tests with coverage (Vitest)
        if: steps.check-scripts.outputs.has_test == 'true'
        run: npm run test
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: Upload coverage to Codecov
        if: steps.check-scripts.outputs.has_test == 'true'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: b46usf/Gamified_Soccer_App
        # working-directory tidak diperlukan untuk action ini

      - name: Run lint
        if: steps.check-scripts.outputs.has_lint == 'true'
        run: npm run lint
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: Build project
        if: steps.check-scripts.outputs.has_build == 'true'
        run: npm run build
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: No scripts found
        if: steps.check-scripts.outputs.has_test != 'true' && steps.check-scripts.outputs.has_lint != 'true' && steps.check-scripts.outputs.has_build != 'true'
        run: echo "No test, lint, or build scripts found. Skipping."
        working-directory: ${{ steps.detect.outputs.workdir }}